{"version":3,"sources":["state/actions/UiActions.ts","components/Sidepanel/Sidepanel.tsx","containers/Sidepanel/Sidepanel.ts","state/reducers/UiReducer.ts","state/reducers/index.ts","state/store.ts","components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["UI_OPEN_SIDEPANEL","UI_CLOSE_SIDEPANEL","closeSidePanel","type","styles","createStyles","list","width","fullList","SidePanel","classes","this","props","sideList","react_default","a","createElement","index_es","className","map","text","index","button","key","Inbox_default","Mail_default","primary","Drawer_default","open","onClose","tabIndex","role","onClick","onKeyDown","Component","withStyles","connect","_ref","ui","sidepanelOpen","dispatch","Sidepanel","defaultState","reducers","state","arguments","length","undefined","Object","objectSpread","reducer","combineReducers","enhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","store","createStore","root","flexGrow","grow","menuButton","marginLeft","marginRight","App","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","toggleDrawer","Fragment","CssBaseline_default","Sidepanel_Sidepanel","position","color","aria-label","Menu_default","variant","Button_default","Boolean","location","hostname","match","ReactDOM","render","es","components_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ac57a7b8.chunk.js","sourcesContent":["export const UI_OPEN_SIDEPANEL = 'UI_OPEN_SIDEPANEL';\nexport type UI_OPEN_SIDEPANEL = typeof UI_OPEN_SIDEPANEL;\n\nexport const UI_CLOSE_SIDEPANEL = 'UI_CLOSE_SIDEPANEL';\nexport type UI_CLOSE_SIDEPANEL = typeof UI_CLOSE_SIDEPANEL;\n\nexport interface CloseSidePanel {\n    type: UI_CLOSE_SIDEPANEL;\n}\nexport function closeSidePanel(): CloseSidePanel {\n    return {\n        type: UI_CLOSE_SIDEPANEL\n    }\n}\n\nexport interface OpenSidePanel {\n    type: UI_OPEN_SIDEPANEL;\n}\nexport function openSidePanel(): OpenSidePanel {\n    return {\n        type: UI_OPEN_SIDEPANEL\n    }\n}\n\nexport type SidePanelAction = CloseSidePanel | OpenSidePanel;\n\nexport type UIAction = SidePanelAction;","import { createStyles, Divider, List, ListItem, ListItemIcon, ListItemText, WithStyles, withStyles } from \"@material-ui/core\";\nimport Drawer from '@material-ui/core/Drawer';\nimport InboxIcon from \"@material-ui/icons/Inbox\";\nimport MailIcon from \"@material-ui/icons/Mail\";\nimport React, { Component } from \"react\";\n\nconst styles = createStyles({\n    list: {\n      width: 250,\n    },\n    fullList: {\n      width: 'auto',\n    },\n  });\n\n\nexport interface Props extends WithStyles<typeof styles> {\n    open: boolean,\n    onClose: () => void\n};\n\nclass SidePanel extends Component<Props, {}> {\n\n  render() {\n    const { classes } = this.props;\n    const sideList = (\n        <div>\n          <List className={classes.list}>\n            {['Inbox', 'Starred', 'Send email', 'Drafts'].map((text, index) => (\n              <ListItem button key={text}>\n                <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\n                <ListItemText primary={text} />\n              </ListItem>\n            ))}\n          </List>\n          <Divider />\n          <List>\n            {['All mail', 'Trash', 'Spam'].map((text, index) => (\n              <ListItem button key={text}>\n                <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\n                <ListItemText primary={text} />\n              </ListItem>\n            ))}\n          </List>\n        </div>\n      );\n    return (\n        <Drawer open={this.props.open} onClose={this.props.onClose}>\n          <div\n            tabIndex={0}\n            role=\"button\"\n            onClick={this.props.onClose}\n            onKeyDown={this.props.onClose}\n          >\n          {sideList}\n          </div>\n        </Drawer>\n    )\n  }\n}\n\nexport default withStyles(styles)(SidePanel);\n","import { connect } from \"react-redux\";\nimport { StoreState } from \"../../state/store\";\nimport { Dispatch, AnyAction } from \"redux\";\nimport { SidePanelAction, closeSidePanel } from \"../../state/actions/UiActions\";\nimport Sidepanel from \"../../components/Sidepanel/Sidepanel\";\n\nfunction mapStateToProps({ ui: { sidepanelOpen } }: StoreState) {\n  return {\n    open: sidepanelOpen\n  };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<SidePanelAction>) {\n  return {\n    onClose: () => dispatch(closeSidePanel())\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Sidepanel);\n","import { UIAction, UI_OPEN_SIDEPANEL, UI_CLOSE_SIDEPANEL } from \"../actions/UiActions\";\n\nexport interface UiState {\n  sidepanelOpen: boolean;\n}\n\nconst defaultState = {\n    sidepanelOpen: false\n}\n\nexport function uiReducer(state: UiState = defaultState, action: UIAction): UiState {\n  switch (action.type) {\n    case UI_OPEN_SIDEPANEL:\n      return {\n        ...state,\n        sidepanelOpen: true\n      };\n    case UI_CLOSE_SIDEPANEL:\n      return {\n        ...state,\n        sidepanelOpen: false\n      };\n  }\n  return state;\n}\n","import { uiReducer } from \"./UiReducer\";\n\nexport const reducers = {\n    ui: uiReducer\n}","import { UiState } from \"./reducers/UiReducer\";\nimport { createStore, combineReducers, Store, applyMiddleware } from \"redux\";\nimport { reducers } from \"./reducers\";\nimport { AllActions } from \"./actions\";\n\nexport interface StoreState {\n  ui: UiState;\n}\n\n// Build Reducer\nconst reducer = combineReducers<StoreState>(reducers);\n\n// Build Middleware\n// @ts-ignore window object has not __REDUX_...\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst enhancers = composeEnhancers(applyMiddleware());\n\n// Build Store\nconst store: Store<StoreState> = createStore<StoreState, AllActions, any, any>(reducer, enhancers);\n\nexport const dispatch = (action: any) => {\n  return store.dispatch(action);\n};\n\nexport default store;","import { AppBar, createStyles, IconButton, Toolbar, Typography, WithStyles, withStyles } from \"@material-ui/core\";\nimport Button from \"@material-ui/core/Button\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport React, { Component } from \"react\";\nimport \"./App.css\";\nimport Sidepanel from \"../../containers/Sidepanel/Sidepanel\";\nimport store from \"../../state/store\";\nimport { openSidePanel, closeSidePanel } from \"../../state/actions/UiActions\";\n\nconst styles = createStyles({\n  root: {\n    flexGrow: 1\n  },\n  grow: {\n    flexGrow: 1\n  },\n  menuButton: {\n    marginLeft: -12,\n    marginRight: 20\n  }\n});\n\nexport interface Props extends WithStyles<typeof styles> {}\nclass App extends Component<Props>{\n  constructor(props: Props) {\n    super(props);\n  }\n\n  toggleDrawer = (open: boolean) => () => {\n    if(open){\n      store.dispatch(openSidePanel());\n    }else{\n      store.dispatch(closeSidePanel());\n    }\n  };\n\n  render(){\n    const { classes } = this.props;\n    return (\n      <React.Fragment>\n        <CssBaseline />\n        <div className=\"App\">\n          <Sidepanel></Sidepanel>\n          <AppBar position=\"static\">\n            <Toolbar>\n              <IconButton className={classes.menuButton}  onClick={this.toggleDrawer(true)} color=\"inherit\" aria-label=\"Menu\">\n                <MenuIcon />\n              </IconButton>\n              <Typography variant=\"h6\" color=\"inherit\" className={classes.grow}>\n                News\n              </Typography>\n              <Button color=\"inherit\">Login</Button>\n            </Toolbar>\n          </AppBar>\n          <Button variant=\"contained\" color=\"primary\">\n            Hello There\n          </Button>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './state/store';\n\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}